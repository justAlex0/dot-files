(include "src/bar/variables.yuck")

(defwidget bar []
 (centerbox :class "bar" :orientation "v" (bar-left) (bar-center) (bar-right)))

(defwidget bar-left []
 (box :valign "start" :halign "center" :orientation "v" :space-evenly false :spacing 10
  (label)
  (literal :content {wm-tags})))

(defwidget bar-center []
 (box :valign "center" :halign "center" :orientation "v" :space-evenly false))
  ;; (literal :content {wm-tags})))

(defwidget bar-right []
 (box :valign "end" :halign "center" :orientation "v" :space-evenly false
  (cpu)
  (cpu-temp)
  (ram)
  (storage)
  (volume)
  (brightness)
  (net)
  (power)
  (keyboard_layout)
  (time)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (defwidget workspaces []
;;  (box :orientation "v" :space-evenly false
;;   (for entry in wm-tags
;;    (box :orientation "v" :space-evenly false :spacing 10 :valign "center" :halign "center"
;;     (label
;;      :class {entry["busy"] ? "workspace-tag-mine" : "workspace-tag-visible"}
;;      :text {entry["windows"] ? "󰜋" : "󰜌"})))))

(defwidget cpu []
 (box :orientation "v" :space-evenly false
  (label :class "cpu-result" :text "${round(EWW_CPU.avg, 0)}")
  (label :class "cpu-title" :text "CPU")))

(defwidget cpu-temp []
 (box :orientation "v" :space-evenly false
  (label :class "cpu-result" :text "${round(cpu-temperature, 0)}°C")
  (label :class "cpu-result" :text "${gpu-temperature}°C")
  (label :class "cpu-title" :text "󰔏")))

(defwidget ram []
 (box :orientation "v" :space-evenly false
  (label :class "ram-result" :text "${round(EWW_RAM.used_mem_perc, 0)}")
  (label :class "ram-title" :text "RAM")))

(defwidget storage []
 (box :orientation "v" :space-evenly false
  (label :class "storage-result" :text "${storage-usage}")
  (label :class "storage-title" :text "󰋊")))

(defwidget volume []
 (box :orientation "v" :space-evenly false
  (box :class "bar-slider volume-slider" :orientation "v" :space-evenly false
   (scale :flipped true :round-digits 0 :value volume :min 0 :max 150 :onchange "~/bin/misc/volume-control.bash set {}" :orientation "v"))
  (button :onclick "~/bin/misc/volume-control.bash toggle-mute" (label :class "volume-title" :text {is_muted ? "󰖁" : "󰕾"}))))

(defwidget brightness []
 (eventbox
  :onhover "${EWW_CMD} update is_brightness_hovered=true; ${EWW_CMD} update brightness_max=\"$(~/.config/eww/scripts/brightness.bash get-max)\""
  :onhoverlost "${EWW_CMD} update is_brightness_hovered=false"
  (box :orientation "v" :space-evenly false
   (revealer :class "bar-slider brightness-slider" :transition "slideup" :reveal is_brightness_hovered :duration "350ms"
    (scale :flipped true :round-digits 0 :value brightness :min 0 :max brightness_max :onchange "~/.config/eww/scripts/brightness.bash set {}" :orientation "v"))
   (button :onclick "~/.config/eww/scripts/brightness.bash set-max" (label :class "brightness-title" :text "󰃠")))))

(defwidget net []
 (eventbox
  :onhover "${EWW_CMD} update is_net_hovered=true"
  :onhoverlost "${EWW_CMD} update is_net_hovered=false"
  (box :orientation "v" :space-evenly false
   ;; (revealer :transition "slideup" :reveal is_net_hovered :duration "350ms"
    (box :class "net-result" :orientation "v" :space-evenly false
     (label :text {eth-speed[0]})
     (label :text "󰯎")
     (label :text {eth-speed[1]}))
   (label :class "net-title" :text {connection == -1 ? "󰈁" : connection == 0 ? "󰤮" : connection < 25 ? "󰤟" : connection < 50 ? "󰤢" : connection < 75 ? "󰤥" : "󰤨"}))))

(defwidget power []
 (eventbox
  :onhover "${EWW_CMD} update is_power_hovered=true"
  :onhoverlost "${EWW_CMD} update is_power_hovered=false"
  (box :orientation "v" :space-evenly false
   (revealer :transition "slideup" :reveal is_power_hovered :duration "350ms"
    (label :class "power-result" :text "${battery} %"))
   (label :class "power-title" :text battery-icon))))

(defwidget keyboard_layout []
 (button ;; :onclick "~/bin/misc/keyboard-layout.bash"
  (label :class "keyboard_layout-title" :text keyboard_layout)))

(defwidget time []
 (button
  :onclick "bash -c 'if [ $(${EWW_CMD} get isCalendarOpen) == true ]; then ${EWW_CMD} close calendar; ${EWW_CMD} update isCalendarOpen=false; else ${EWW_CMD} open calendar; ${EWW_CMD} update isCalendarOpen=true; fi;'"
  (box :orientation "v" :space-evenly false
   (label :class "time-result" :text day_of_week)
   (label :class "time-result" :style "font-size: 0.8em;" :text date)
   (label :class "time-title" :text hours)
   (label :class "time-title" :text minutes))))

(defwidget calendar-custom []
 (box :class "window-calendar-box" :valign "center" :halign "center" :orientation "v" :space-evenly false
  (label :class "calendar-title" :valign "end" :text time-long)
  (label :class "calendar-title" :valign "center" :text date)
  (calendar)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar
 :monitor 0
 :geometry
 (geometry :x "0%" :y "0%" :width "20px" :height "100%" :anchor "left center")
 :stacking "fg"
 :wm-ignore false
 :reserve (struts :distance "40px" :side "left")
 :windowtype "dock"
 :exclusive true
 (bar))

(defwindow calendar
 :monitor 0
 :geometry
 (geometry :x "3%" :y "-2%" :width "230px" :height "230px" :anchor "bottom left")
 :stacking "fg"
 :wm-ignore true
 :windowtype "dock"
 (calendar-custom))
