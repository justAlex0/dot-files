(include "src/bar/variables.yuck")

(defwidget bar []
 (centerbox :class "bar" :orientation "v"
  (bar-left)
  (bar-center)
  (bar-right)))

(defwidget bar-left []
  (box :valign "start"
       :halign "center"
       :orientation "v"
       :space-evenly false
       (cpu)
       (ram)))

(defwidget bar-center []
  (box :valign "center"
       :halign "center"
       :orientation "v"
       :space-evenly false
       (literal :content {wm-tags})))

(defwidget bar-right []
  (box :valign "end"
       :halign "center"
       :orientation "v"
       :space-evenly false
       (keyboardLayout)
       (net)
       (power)
       (time)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget cpu []
 (box :class "cpu-icon" :spacing 1 :orientation "v" :space-evenly false
  (label :text "CPU")
  (box :class "cpu-result" :orientation "v" :space-evenly false
   (label :text "${round(EWW_CPU.avg, 0)}"))))

(defwidget ram []
  (box :class "ram-icon" :spacing 1 :orientation "v" :space-evenly false
   (label :text "RAM")
   (box :class "ram-result" :orientation "v" :space-evenly false
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}"))))

(defwidget workspaces []
  (for entry in {workspaces-list["list"]}
       (box :valign "center"
            :halign "center"
            :spacing 10
            :orientation "v"
            :space-evenly true
            (label :class {entry["busy"] ? "workspace-tag-mine" : "workspace-tag-visible"}
                   :text {entry["active"] ? "󰜋" : "󰜌"}))))

(defwidget keyboardLayout []
 (button :class "button-keyboardLayout" ;; :onclick "~/bin/misc/keyboard-layout.bash"
  (label :text keyboardLayout)))

(defwidget net []
 (eventbox 
  :onhover "${EWW_CMD} update isNetworkUnderHover=true"
  :onhoverlost "${EWW_CMD} update isNetworkUnderHover=false"
  (box :class "net-icon" :spacing 1 :orientation "v" :space-evenly false
   (revealer :transition "slideup" :reveal isNetworkUnderHover :duration "350ms"
    (box :class "net-result" :orientation "v" :space-evenly false
     (label :text {eth-speed[0]})
     (label :text "󰯎")
     (label :text {eth-speed[1]})))
   (label :text {connection == -1 ? "󰈁" : connection == 0 ? "󰤮" : connection < 25 ? "󰤟" : connection < 50 ? "󰤢" : connection < 75 ? "󰤥" : "󰤨"}))))

(defwidget power []
 (eventbox 
  :onhover "${EWW_CMD} update isBatteryUnderHover=true"
  :onhoverlost "${EWW_CMD} update isBatteryUnderHover=false"
  (box :class "power-icon" :spacing 1 :orientation "v" :space-evenly false
   (revealer :transition "slideup" :reveal isBatteryUnderHover :duration "350ms"
     (box :class "power-result" :orientation "v" :space-evenly false
      (label :text "${battery} %")))
   (label :text battery-icon))))

(defwidget time []
 (button :class "button-time"
  :onclick "bash -c 'if [ $(${EWW_CMD} get isCalendarOpen) == true ]; then ${EWW_CMD} close calendar; ${EWW_CMD} update isCalendarOpen=false; else ${EWW_CMD} open calendar; ${EWW_CMD} update isCalendarOpen=true; fi;'"
  (box :orientation "v" :space-evenly false
   (label :text hours)
   (label :text minutes))))

(defwidget calendar-custom []
  (box :class "window-calendar-box"
       :valign "center"
       :halign "center"
       :orientation "v"
       :space-evenly false
       (label :class "calendar-title"
              :valign "end"
              :text time-long)
       (label :class "calendar-title"
              :valign "center"
              :text date)
       (calendar)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar
  :monitor 0
  :geometry
  (geometry :x "0%"
            :y "0%"
            :width "35px"
            :height "100%"
            :anchor "left center")
  :stacking "fg"
  :wm-ignore false
  :reserve (struts :distance "40px" :side "left")
  :windowtype "dock"
  :exclusive true
  (bar))

(defwindow calendar
  :monitor 0
  :geometry
  (geometry :x "3%"
            :y "-2%"
            :width "230px"
            :height "230px"
            :anchor "bottom left")
  :stacking "fg"
  :wm-ignore true
  :windowtype "dock"
  (calendar-custom))
